from fastapi import FastAPI, Request
import requests
import os

app = FastAPI()

# ‡∏î‡∏∂‡∏á LINE Access Token ‡∏à‡∏≤‡∏Å Environment Variable
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
USER_SESSIONS = {}
MATERIAL_COSTS = {
    "ABS": 200, "PC": 250, "Nylon": 350, "PP": 70, "PE": 60,
    "PVC": 90, "PET": 100, "PMMA": 150, "POM": 350, "PU": 400
}

@app.post("/callback")
async def line_webhook(request: Request):
    try:
        payload = await request.json()
        print("üì© Received Payload:", payload)

        if "events" not in payload:
            print("‚ö†Ô∏è No events found in payload!")
            return {"status": "no events"}

        for event in payload["events"]:
            print(f"üîç Event Received: {event}")  # ‚úÖ Log Event ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE

            if "message" not in event or "text" not in event["message"]:
                print("‚ö†Ô∏è Event ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ")
                continue  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô KeyError

            user_id = event["source"]["userId"]
            reply_token = event["replyToken"]
            message_text = event["message"]["text"].strip()

            print(f"üì© User: {user_id} | Message: {message_text}")  # ‚úÖ Debugging

            if message_text == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì":
                reply_message(reply_token, "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏")
            else:
                reply_message(reply_token, f"üì© ‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á: {message_text}")

        return {"status": "success"}

    except Exception as e:
        print(f"üî• ERROR: {e}")
        return {"status": "error", "message": str(e)}



def start_calculation(reply_token, user_id):
    """ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì """
    USER_SESSIONS[user_id] = {"step": 1}
    reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï:\nABS, PC, Nylon, PP, PE, PVC, PET, PMMA, POM, PU")


def handle_response(reply_token, user_id, message_text):
    """ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô """
    session = USER_SESSIONS.get(user_id, {})
    step = session.get("step", 0)

    if step == 1:
        material = message_text.upper()
        if material not in MATERIAL_COSTS:
            reply_message(reply_token, "‚ùå ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ")
            return
        session["material"] = material
        session["step"] = 2
        reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏áx‡∏¢‡∏≤‡∏ßx‡∏™‡∏π‡∏á) cm ‡πÄ‡∏ä‡πà‡∏ô 10.5x15.5x5.5")

    elif step == 2:
        try:
            dimensions = list(map(float, message_text.lower().replace(' ', '').split('x')))
            if len(dimensions) != 3:
                raise ValueError
            session["dimensions"] = dimensions
            session["step"] = 3
            reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
        except ValueError:
            reply_message(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô 10.5x15.5x5.5")

    elif step == 3:
        try:
            quantity = int(message_text)
            if quantity <= 0:
                raise ValueError
            session["quantity"] = quantity
            calculate_and_show_result(reply_token, user_id)
        except ValueError:
            reply_message(reply_token, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 100")


def calculate_and_show_result(reply_token, user_id):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå """
    session = USER_SESSIONS[user_id]
    material = session["material"]
    w, l, h = session["dimensions"]
    quantity = session["quantity"]

    volume = w * l * h
    density = 1.05
    weight_kg = (volume * density) / 1000
    total_cost = weight_kg * quantity * MATERIAL_COSTS[material]

    response_message = (
        f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n"
        f"üìå ‡∏ß‡∏±‡∏™‡∏î‡∏∏: {material}\n"
        f"üìå ‡∏Ç‡∏ô‡∏≤‡∏î: {w}x{l}x{h} cm¬≥\n"
        f"üìå ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£: {volume:.2f} cm¬≥\üìå ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {weight_kg:.2f} kg\n"
        f"üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {quantity} ‡∏ä‡∏¥‡πâ‡∏ô\n"
        f"üìå ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó\n\n"
        f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏´‡∏°?"
    )

    reply_message(reply_token, response_message)
    session["step"] = 4


def reply_message(reply_token, text):
    """ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE """
    headers = {
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    
    print(f"üì§ Sending to LINE: {data}")  # ‚úÖ Debugging Request ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á

    response = requests.post(
        "https://api.line.me/v2/bot/message/reply",
        headers=headers,
        json=data
    )
    
    print(f"üì§ LINE Response Status: {response.status_code}")  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Response Code
    print(f"üì§ LINE Response Body: {response.text}")  # ‚úÖ ‡∏î‡∏π Response Body

    if response.status_code != 200:
        print(f"‚ùå LINE API Error: {response.text}")  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Error ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE_ACCESS_TOKEN ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
if not LINE_ACCESS_TOKEN:
    raise ValueError("‚ùå LINE_ACCESS_TOKEN is missing! Please set it in Cloud Run.")
else:
    print(f"‚úÖ LINE_ACCESS_TOKEN is set! Length: {len(LINE_ACCESS_TOKEN)} characters")

