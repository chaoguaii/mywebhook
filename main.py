from flask import Flask, request, jsonify
import requests
import os
from google.oauth2 import service_account
from googleapiclient.discovery import build

app = Flask(__name__)

# üîπ ‡πÇ‡∏´‡∏•‡∏î Environment Variables (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Google Cloud Run ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô Docker)
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
GOOGLE_APPLICATION_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")  # path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON Credentials
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # Spreadsheet ID ‡∏Ç‡∏≠‡∏á Google Sheets
SHEET_NAME = os.getenv("SHEET_NAME", "Data")  # ‡∏ä‡∏∑‡πà‡∏≠ sheet ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

print("LINE_ACCESS_TOKEN:", LINE_ACCESS_TOKEN)

# üîπ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
USER_SESSIONS = {}

# üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡∏ö‡∏≤‡∏ó/kg)
MATERIAL_COSTS = {
    "ABS": 200,
    "PC": 250,
    "Nylon": 350,
    "PP": 70,
    "PE": 60,
    "PVC": 90,
    "PET": 100,
    "PMMA": 150,
    "POM": 350,
    "PU": 400
}

@app.route("/", methods=["GET"])
def home():
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô """
    return "LINE Webhook is running", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    """ ‡∏£‡∏±‡∏ö Webhook Event ‡∏à‡∏≤‡∏Å LINE """
    if request.method == "POST":
        data = request.json
        print("üì© Received:", data)

        for event in data.get("events", []):
            user_id = event["source"]["userId"]
            if "message" in event:
                message_text = event["message"]["text"].strip()
                print(f"üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å {user_id}: {message_text}")

                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                if message_text.lower() == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì":
                    start_questionnaire(user_id)
                else:
                    process_response(user_id, message_text)

        return jsonify({"status": "ok"}), 200
    else:
        return jsonify({"error": "Method Not Allowed"}), 405

def start_questionnaire(user_id):
    """ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ """
    USER_SESSIONS[user_id] = {"step": 1}
    send_message(user_id, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï:\nABS, PC, Nylon, PP, PE, PVC, PET, PMMA, POM, PU")

def process_response(user_id, message_text):
    """ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô """
    if user_id not in USER_SESSIONS:
        send_message(user_id, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì'")
        return

    step = USER_SESSIONS[user_id]["step"]

    if step == 1:
        if message_text not in MATERIAL_COSTS:
            send_message(user_id, "‚ùå ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å:\nABS, PC, Nylon, PP, PE, PVC, PET, PMMA, POM, PU")
            return
        USER_SESSIONS[user_id]["material"] = message_text
        USER_SESSIONS[user_id]["step"] = 2
        send_message(user_id, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏áx‡∏¢‡∏≤‡∏ßx‡∏™‡∏π‡∏á) cm ‡πÄ‡∏ä‡πà‡∏ô 10x15x5")

    elif step == 2:
        USER_SESSIONS[user_id]["size"] = message_text
        USER_SESSIONS[user_id]["step"] = 3
        send_message(user_id, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")

    elif step == 3:
        try:
            USER_SESSIONS[user_id]["quantity"] = int(message_text)
            USER_SESSIONS[user_id]["step"] = 4
            send_message(user_id, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'")
        except ValueError:
            send_message(user_id, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 100")

    elif step == 4:
        if message_text.strip() == "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£":
            calculate_cost(user_id)
        else:
            send_message(user_id, "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£' ‡πÉ‡∏´‡∏°‡πà")
            del USER_SESSIONS[user_id]

def calculate_cost(user_id):
    """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets """
    material = USER_SESSIONS[user_id]["material"]
    size = USER_SESSIONS[user_id]["size"]
    quantity = USER_SESSIONS[user_id]["quantity"]

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£
    try:
        dimensions = list(map(int, size.split("x")))
        if len(dimensions) != 3:
            raise ValueError("Invalid dimensions")
        volume = dimensions[0] * dimensions[1] * dimensions[2]
    except Exception as e:
        send_message(user_id, "‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 10x15x5")
        return

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
    material_cost_per_kg = MATERIAL_COSTS.get(material, 150)
    density = 1.05  # g/cm¬≥
    weight_kg = (volume * density) / 1000
    total_cost = weight_kg * quantity * material_cost_per_kg

    try:
        write_to_sheet(user_id, material, size, quantity, volume, weight_kg, total_cost)
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets: {e}")

    result_text = (
        f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n"
        f"üìå ‡∏ß‡∏±‡∏™‡∏î‡∏∏: {material}\n"
        f"üìå ‡∏Ç‡∏ô‡∏≤‡∏î: {size} cm¬≥\n"
        f"üìå ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£: {volume} cm¬≥\n"
        f"üìå ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {weight_kg:.2f} kg\n"
        f"üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {quantity} ‡∏ä‡∏¥‡πâ‡∏ô\n"
        f"üìå ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó"
    )
    send_message(user_id, result_text)
    del USER_SESSIONS[user_id]

def write_to_sheet(user_id, material, size, quantity, volume, weight_kg, total_cost):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheets """
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
    credentials = service_account.Credentials.from_service_account_file(
        GOOGLE_APPLICATION_CREDENTIALS, scopes=SCOPES)
    service = build('sheets', 'v4', credentials=credentials)

    values = [
        [user_id, material, size, quantity, volume, f"{weight_kg:.2f}", f"{total_cost:,.2f}"]
    ]
    body = {
        'values': values
    }
    range_name = f"{SHEET_NAME}!A1"
    result = service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range=range_name,
        valueInputOption="RAW",
        body=body
    ).execute()
    updated_cells = result.get('updates', {}).get('updatedCells', 0)
    print(f"{updated_cells} cells appended to Google Sheets.")

def send_message(user_id, text):
    """ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE User """
    headers = {
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    message = {
        "to": user_id,
        "messages": [{"type": "text", "text": text}]
    }
    response = requests.post("https://api.line.me/v2/bot/message/push", headers=headers, json=message)
    print(f"üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà {user_id}: {text}")
    print(f"üì° LINE Response: {response.status_code} {response.text}")

if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡πà‡∏≤‡∏ô Environment Variable ‡∏´‡∏£‡∏∑‡∏≠ 8080 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    port = int(os.getenv("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
