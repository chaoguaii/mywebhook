from fastapi import FastAPI, Request
import os
import requests
from google.cloud import bigquery
from datetime import datetime
import uvicorn

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Service Account JSON
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "C:/Users/Guai/Downloads/line-bot-webhook-453815-4a536467597b.json"

app = FastAPI()

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Environment Variable
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
BQ_TABLE_ORDERS = "line-bot-webhook-453815.cost_calculations.orders"
BQ_TABLE_QUOTES = "line-bot-webhook-453815.cost_calculations.quotation_requests"

# ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡∏ö‡∏≤‡∏ó/kg)
MATERIAL_COSTS = {
    "ABS": 200, "PC": 250, "Nylon": 350, "PP": 70, "PE": 60,
    "PVC": 90, "PET": 100, "PMMA": 150, "POM": 350, "PU": 400
}

# ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
USER_SESSIONS = {}

@app.get("/")
def read_root():
    return {"message": "LINE Webhook is running"}

@app.post("/callback")
async def line_webhook(request: Request):
    """ ‡∏£‡∏±‡∏ö Webhook Event ‡∏à‡∏≤‡∏Å LINE """
    payload = await request.json()
    print("üì© Received Payload:", payload)

    for event in payload["events"]:
        user_id = event["source"]["userId"]
        reply_token = event["replyToken"]
        message_text = event["message"]["text"].strip()

        print(f"üì© User: {user_id} | Message: {message_text}")

        if message_text == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì":
            start_calculation(reply_token, user_id)
        elif message_text == "‡πÉ‡∏ä‡πà":
            request_quotation(reply_token, user_id)
        elif message_text == "‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤":
            request_customer_info(reply_token, user_id)
        else:
            handle_response(reply_token, user_id, message_text)

    return {"status": "success"}  # ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö status code 200

def start_calculation(reply_token, user_id):
    """ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì """
    USER_SESSIONS[user_id] = {"step": 1}
    reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï:\nABS, PC, Nylon, PP, PE, PVC, PET, PMMA, POM, PU")

def handle_response(reply_token, user_id, message_text):
    """ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô """
    if user_id not in USER_SESSIONS:
        reply_message(reply_token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì'")
        return

    session = USER_SESSIONS[user_id]
    step = session.get("step", 0)

    if step == 1:
        material = message_text.upper()
        if material not in MATERIAL_COSTS:
            reply_message(reply_token, "‚ùå ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ")
            return
        session["material"] = material
        session["step"] = 2
        reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏áx‡∏¢‡∏≤‡∏ßx‡∏™‡∏π‡∏á) cm ‡πÄ‡∏ä‡πà‡∏ô 10.5x15.5x5.5")

    elif step == 2:
        try:
            dimensions = list(map(float, message_text.replace(' ', '').split('x')))
            if len(dimensions) != 3:
                raise ValueError
            session["dimensions"] = dimensions
            session["step"] = 3
            reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
        except ValueError:
            reply_message(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô 10.5x15.5x5.5")

    elif step == 3:
        try:
            quantity = int(message_text)
            session["quantity"] = quantity

            # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
            material = session["material"]
            w, l, h = session["dimensions"]
            volume = w * l * h
            density = 1.05
            weight_kg = (volume * density) / 1000
            total_cost = weight_kg * quantity * MATERIAL_COSTS.get(material, 0)

            session["cost"] = total_cost
            session["step"] = 4

            reply_message(reply_token, f"""‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:
üìå ‡∏ß‡∏±‡∏™‡∏î‡∏∏: {material}
üìå ‡∏Ç‡∏ô‡∏≤‡∏î: {w}x{l}x{h} cm¬≥
üìå ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£: {volume:.2f} cm¬≥
üìå ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {weight_kg:.2f} kg
üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {quantity} ‡∏ä‡∏¥‡πâ‡∏ô
üìå ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó

‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏´‡∏°? (‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô)
""")
        except ValueError:
            reply_message(reply_token, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 100")

    elif step == 4:
        if message_text == "‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤":
            session["step"] = 5
            reply_message(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, Email) ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (,)")
        else:
            reply_message(reply_token, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")

    elif step == 5:
        try:
            name, phone, email = message_text.split(",")
            name = name.strip()
            phone = phone.strip()
            email = email.strip()

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á BigQuery
            material = session["material"]
            dimensions = session["dimensions"]
            quantity = session["quantity"]
            cost = session["cost"]
            size = "x".join(map(str, dimensions))
            volume = dimensions[0] * dimensions[1] * dimensions[2]
            weight_kg = (volume * 1.05) / 1000

            save_success = save_order_to_bigquery(
                user_id, material, size, volume, weight_kg, quantity, cost, name, phone, email
            )

            if save_success:
                reply_message(reply_token, f"""‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
üìå ‡∏ä‡∏∑‡πà‡∏≠: {name}
üìå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {phone}
üìå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {email}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!
""")
                del USER_SESSIONS[user_id]  # ‡∏•‡∏ö session ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
            else:
                reply_message(reply_token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        except Exception as e:
            print(f"üî• ERROR: {e}")
            reply_message(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•'")

def save_order_to_bigquery(user_id, material, size, volume, weight_kg, quantity, total_cost, name, phone, email):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á BigQuery """
    row = [{
        "user_id": user_id,
        "material": material,
        "size": size,
        "volume": float(volume),
        "weight_kg": float(weight_kg),
        "quantity": int(quantity),
        "total_cost": float(total_cost),
        "name": name,
        "phone": phone,
        "email": email,
        "timestamp": datetime.utcnow().isoformat()
    }]

    try:
        bq_client = bigquery.Client()
        bq_client.insert_rows_json(BQ_TABLE_QUOTES, row)
        return True
    except Exception as e:
        print(f"üî• ERROR inserting into BigQuery: {e}")
        return False

def reply_message(reply_token, text):
    """ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE """
    headers = {
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {"replyToken": reply_token, "messages": [{"type": "text", "text": text}]}
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)

if __name__ == "__main__":
    PORT = int(os.getenv("PORT", 8080))  # ‡πÉ‡∏ä‡πâ PORT ‡∏ó‡∏µ‡πà Cloud Run ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    uvicorn.run(app, host="0.0.0.0", port=PORT)