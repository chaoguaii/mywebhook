import os
import uuid
from datetime import datetime
from google.cloud import bigquery
from fastapi import FastAPI, Request
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from linebot.exceptions import InvalidSignatureError
from linebot.models import FollowEvent

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Cloud Project
PROJECT_ID = "your_project_id"
DATASET_ID = "mold_plastic_db"

client = bigquery.Client(project=PROJECT_ID)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Messaging API
LINE_ACCESS_TOKEN = "your_line_channel_access_token"
LINE_SECRET = "your_line_channel_secret"

line_bot_api = LineBotApi(LINE_ACCESS_TOKEN)
handler = WebhookHandler(LINE_SECRET)

app = FastAPI()

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
customer_data = {}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å BigQuery
def calculate_price(product_type, dimensions, quantity):
    query = f"""
        SELECT base_price FROM `{PROJECT_ID}.{DATASET_ID}.pricing_data`
        WHERE product_type = '{product_type}' AND size_range = '{dimensions}'
    """
    result = client.query(query).result()
    for row in result:
        return row.base_price * quantity
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
def save_quotation_request(user_id, customer_name, product_type, dimensions, quantity):
    quotation_id = str(uuid.uuid4())
    estimated_price = calculate_price(product_type, dimensions, quantity)

    if estimated_price is None:
        return None

    data = [
        {
            "quotation_id": quotation_id,
            "customer_name": customer_name,
            "product_type": product_type,
            "dimensions": dimensions,
            "quantity": quantity,
            "estimated_price": estimated_price,
            "request_date": datetime.utcnow(),
        }
    ]

    table_ref = client.dataset(DATASET_ID).table("quotation_requests")
    client.insert_rows_json(table_ref, data)
    return quotation_id, estimated_price

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
def check_order_status(order_id):
    query = f"""
        SELECT order_status, order_date FROM `{PROJECT_ID}.{DATASET_ID}.customer_orders`
        WHERE order_id = '{order_id}'
    """
    result = client.query(query).result()
    for row in result:
        return f"üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {order_id} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {row.order_status} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {row.order_date})"
    return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"

@app.post("/callback")
async def callback(request: Request):
    signature = request.headers["X-Line-Signature"]
    body = await request.body()

    try:
        handler.handle(body.decode(), signature)
    except InvalidSignatureError:
        return {"error": "Invalid Signature"}

    return {"message": "OK"}

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip()

    if text.lower().startswith("‡∏Ç‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ABS, PP, PET)"))
        customer_data[user_id] = {}

    elif user_id in customer_data:
        if "product_type" not in customer_data[user_id]:
            customer_data[user_id]["product_type"] = text
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î (‡πÄ‡∏ä‡πà‡∏ô 10x10 cm, 20x20 cm)"))

        elif "dimensions" not in customer_data[user_id]:
            customer_data[user_id]["dimensions"] = text
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"))

        elif "quantity" not in customer_data[user_id]:
            customer_data[user_id]["quantity"] = int(text)
            data = customer_data[user_id]
            estimated_price = calculate_price(data["product_type"], data["dimensions"], data["quantity"])

            if estimated_price:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: {estimated_price:.2f} ‡∏ö‡∏≤‡∏ó\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏û‡∏¥‡∏°‡∏û‡πå: '‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤')"))
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"))
                del customer_data[user_id]

    elif text.lower().startswith("‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤"):
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"))

    elif "customer_name" not in customer_data[user_id]:
        customer_data[user_id]["customer_name"] = text
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"))

    elif "customer_email" not in customer_data[user_id]:
        customer_data[user_id]["customer_email"] = text
        data = customer_data[user_id]
        quotation_id, estimated_price = save_quotation_request(
            user_id, data["customer_name"], data["product_type"], data["dimensions"], data["quantity"]
        )
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úÖ ‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤: {quotation_id}\n‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: {estimated_price:.2f} ‡∏ö‡∏≤‡∏ó"))
        del customer_data[user_id]

    elif text.lower().startswith("‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"):
        order_id = text.split(" ")[1]
        status = check_order_status(order_id)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=status))

@handler.add(FollowEvent)
def handle_follow(event):
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ç‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
